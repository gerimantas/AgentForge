======================================================================
 PROJEKTO DOKUMENTACIJA IR VYKDYMO EIGA: AgentForge
======================================================================

PROJEKTO TIKSLAS: Sukurti autonominę, save tobulinančią ir patikimą DI agentų sistemą,
kurios pagrindinė funkcija – analizuoti ir optimizuoti vartotojo pateiktas
užklausas (prompts), remiantis nuolat atnaujinama, patikrintų šaltinių žinių baze.

BŪSENA: Vykdoma (In Progress)
PASKUTINIS ATNAUJINIMAS: 2025-07-10

----------------------------------------------------------------------
 KŪRIMO ŽURNALAS IR KLAIDŲ ANALIZĖ (DEBUGGING SUMMARY)
----------------------------------------------------------------------

Šiame skyriuje apžvelgiamos pagrindinės techninės problemos, su kuriomis susidūrėme
projekto pradžioje, ir jų sprendimai. Šie iššūkiai sustiprino projekto pamatus.

1.  PROBLEMA: Python paketų, reikalaujančių C++ kompiliatoriaus, diegimo klaidos.
    *   KLAIDOS POŽYMIS: `error: Microsoft Visual C++ 14.0 or greater is required.`
    *   TIKROJI PRIEŽASTIS: Windows aplinkoje trūko būtinų įrankių (`Build Tools`),
      kad būtų galima kompiliuoti Python paketus (pvz., `chroma-hnswlib`), kurie
      turi C++ priklausomybių.
    *   GALUTINIS SPRENDIMAS: Įdiegti "Microsoft C++ Build Tools" paketą, konkrečiai
      pasirenkant "Desktop development with C++" darbo krūvį.

2.  PROBLEMA: Python virtualios aplinkos (`.venv`) nestabilus aktyvavimas VSCode.
    *   KLAIDOS POŽYMIS: `(.venv)` prierašas terminale neatsirasdavo automatiškai.
    *   TIKROJI PRIEŽASTIS: Sudėtinga problema, susijusi su Windows PowerShell
      saugumo nustatymais (Execution Policy, PSReadLine).
    *   GALUTINIS SPRENDIMAS: Nustoti bandyti taisyti PowerShell ir apeiti problemą.
      VSCode numatytasis terminalas buvo pakeistas į klasikinį `Command Prompt`,
      o projekto konfigūracija išsaugota `.code-workspace` faile, kas užtikrino
      stabilų ir automatinį `.venv` aktyvavimą.

3.  PROBLEMA: Nuolatinės importavimo klaidos (`ModuleNotFoundError`, `ImportError`).
    *   KLAIDOS POŽYMIS: `cannot import name '...' from '...'`.
    *   TIKROJI PRIEŽASTIS: Greita bibliotekų evoliucija. Instrukcijos rėmėsi
      senesnėmis `crewai` ir `langchain` praktikomis. Pagrindinės priežastys:
      a) Lokalaus failo pavadinimo konfliktas (`tools.py` su bibliotekos moduliu).
      b) Neteisingai nurodyta `@tool` dekoratoriaus vieta.
    *   GALUTINIS SPRENDIMAS: Vietinis failas pervadintas į `custom_tools.py`, kad
      būtų išvengta konfliktų. Nustatyta teisinga `@tool` dekoratoriaus importavimo
      vieta: `from crewai.tools import tool`.

4.  PROBLEMA: Agentų instrukcijų ir užduočių logikos netikslumai.
    *   KLAIDOS POŽYMIS: Agentai grąžindavo ne patį rezultatą, o meta-komentarą
      apie jį (pvz., "Here is the final prompt...").
    *   TIKROJI PRIEŽASTIS: Per daug abstraktus `expected_output` ir `description`
      užduočių apibrėžimas, leidžiantis LLM improvizuoti.
    *   GALUTINIS SPRENDIMAS: Patikslinti užduočių aprašymus, pridedant griežtas,
      didžiosiomis raidėmis parašytas instrukcijas (pvz., "Your final output MUST
      be ONLY the text...") ir pateikiant konkretų tikėtino rezultato pavyzdį.

----------------------------------------------------------------------
 PROJEKTO KŪRIMO PLANAS (ROADMAP)
----------------------------------------------------------------------

[✔] - Užbaigta
[ ] - Vykdoma / Neužbaigta

--- FAZĖ 1: SISTEMOS BRANDUOLYS IR PATIKIMUMO PAMATAS ---

[✔] 1.1 Žingsnis: Šaltinių Kuravimo Modulio Sukūrimas
    - Sukurtas `source_registry.yaml`.
    - Apibrėžtas `Bibliotekininko` (Librarian) agentas.

[✔] 1.2 Žingsnis: Pagrindinio Palaikymo Ciklo Implementavimas
    - Sukurtas `custom_tools.py` su failų rašymo/skaitymo įrankiais.
    - Apibrėžti `Žvalgo` (Researcher) ir `Architekto` (Architect) agentai.

[✔] 1.3 Žingsnis: Anti-Haliucinacinės Gynybos Sukūrimas
    - Apibrėžtos griežtos, angliškos instrukcijos agentų `backstory`.
    - Sukurtas `FactCheckerTool` (individualus įrankis).

[✔] 1.4 Žingsnis: Pagrindinio Vykdymo Ciklo Implementavimas
    - Apibrėžti `Analitiko`, `Kritiko`, `Tobulintojo` agentai.
    - Suformuluotos angliškos užduotys su patikslintomis instrukcijomis.
    - Integruotas `max_iter` saugiklis.

[✔] 1.5 Žingsnis: Orkestratoriaus (`main.py`) Sukūrimas
    - Sukurtas interaktyvus `main.py` meniu.
    - Ciklų logika išskaidyta į `maintenance_cycle.py` ir `execution_cycle.py`.
    - Centralizuoti nustatymai `config.py` faile.
    - Pridėta automatinio vertimo funkcija.

--- FAZĖ 2: OPTIMIZAVIMAS IR SAVARANKIŠKAS MOKYMASIS ---

[ ] 2.1 Žingsnis: Struktūrizuotos Žinių Bazės Įdiegimas
[ ] 2.2 Žingsnis: Dinaminio Maršruto ir Resursų Valdymo Įdiegimas
[ ] 2.3 Žingsnis: Uždaro Grįžtamojo Ryšio Ciklo Sukūrimas

--- FAZĖ 3: PAŽANGI AUTONOMIJA IR PRODUKTO SUKŪRIMAS ---

[ ] 3.1 Žingsnis: Aktyvaus Eksperimentavimo (A/B Testavimo) Įdiegimas
[ ] 3.2 Žingsnis: Įrankių Auto-Generavimo Implementavimas
[ ] 3.3 Žingsnis: Vartotojo Sąsajos Sukūrimas (API/GUI)
[ ] 3.4 Žingsnis: Interaktyvaus "Žmogus Cikle" Režimo Įdiegimas


----------------------------------------------------------------------
 SEKANTYS VEIKSMAI (NEXT STEPS)
----------------------------------------------------------------------

BAIGĖME: Pilnai įgyvendinta 1 Fazė. Turime veikiantį MVP su patikimumo pamatais.
PRADEDAME: 2 Fazę - Optimizavimas ir Savarankiškas Mokymasis.

Kitas mūsų konkretus veiksmas bus diskusija ir 2.1 Žingsnio planavimas:
transformuoti mūsų `.md` žinių bazę į struktūrizuotą, mašinai skaitomą
formatą (pvz., YAML), kas leis sistemai veikti efektyviau ir protingiau.